///////////////////////////////////////////////////////////////////////////////////////////////////
/// LuaConnect/Type.h
///////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef LUACONNECT_TYPE
#define LUACONNECT_TYPE

#include "Config.h"

///////////////////////////////////////////////////////////////////////////////////////////////////
/// Preprocessor
///////////////////////////////////////////////////////////////////////////////////////////////////
#include "Table.h"

#include <string>
#include <tuple>

///////////////////////////////////////////////////////////////////////////////////////////////////
/// Forward Declarations
///////////////////////////////////////////////////////////////////////////////////////////////////
struct lua_State;

namespace LuaConnect
{
    class VM;
}

namespace LuaConnect
{
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - Type
    ///////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T>
    class LUACONNECT_API Type
    {
        template <typename T>
        friend class Userdata;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Nested Types
    ///////////////////////////////////////////////////////////////////////////////////////////////
    private:
        ///////////////////////////////////////////////////////////////////////////////////////////
        /// Struct - ConstructHandler
        ///////////////////////////////////////////////////////////////////////////////////////////
        template <typename... Args>
        struct ConstructHandler
        {
            static int Call(lua_State* state);
        };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Static Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    private:
        static unsigned char s_key;

        static Table CreateMetatable(VM& vm, std::string name);

        static int Deconstruct(lua_State* state);

    public:
        static const void* ClassKey() { return &s_key; }

        static Table GetMetatable(std::shared_ptr<State> state);

        static bool Exists(VM& vm);
        static void RegisterType(VM& vm, std::string name);

        template <typename... Args>
        static void AddConstructor(VM& vm, Table& typeTable);
        static void AddDeconstructor(VM& vm);

        template <typename F, typename... Upvalues>
        static void AddFunction(VM& vm, std::string name, F func, const Upvalues&... args);
    };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - GenericMeta
    ///////////////////////////////////////////////////////////////////////////////////////////////
    class LUACONNECT_API GenericMeta
    {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public:
        static int DummyDeconstruct(lua_State* state);

        static int Index(lua_State* state);
        static int NewIndex(lua_State* state);

        static int ToString(lua_State* state);
    };
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// Inline Includes
///////////////////////////////////////////////////////////////////////////////////////////////////
#include "Type.inl"

#endif LUACONNECT_TYPE
