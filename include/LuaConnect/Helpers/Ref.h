///////////////////////////////////////////////////////////////////////////////////////////////////
/// LuaConnect/Helpers/Ref.h
///////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef LUACONNECT_HELPERS_REF
#define LUACONNECT_HELPERS_REF

#include "..\Config.h"

///////////////////////////////////////////////////////////////////////////////////////////////////
/// Preprocessor
///////////////////////////////////////////////////////////////////////////////////////////////////
#include <memory>

///////////////////////////////////////////////////////////////////////////////////////////////////
/// Forward Declarations
///////////////////////////////////////////////////////////////////////////////////////////////////
namespace LuaConnect
{
    class State;
}

namespace LuaConnect
{
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - Ref
    ///////////////////////////////////////////////////////////////////////////////////////////////
    class LUACONNECT_API Ref
    {
        template <typename T>
        friend class Stack;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    private:
        int m_ref;

    protected:
        std::shared_ptr<State> m_state;

        Ref(std::shared_ptr<State> state);

        Ref(const Ref& other);
        Ref(Ref&& other);

        virtual ~Ref();

        Ref& operator=(const Ref& other);
        Ref& operator=(Ref&& other);

        bool operator==(const Ref& rhs) const;
        bool operator!=(const Ref& rhs) const;

        void Push() const;
        void Set(int ref);
    };
}

#endif LUACONNECT_HELPERS_REF
