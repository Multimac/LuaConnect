///////////////////////////////////////////////////////////////////////////////////////////////////
/// LuaConnect/Helpers/Stack.h
///////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef LUACONNECT_HELPERS_STACK
#define LUACONNECT_HELPERS_STACK

#include "..\Config.h"

///////////////////////////////////////////////////////////////////////////////////////////////////
/// Preprocessor
///////////////////////////////////////////////////////////////////////////////////////////////////
#include "Headers.h"
#include "..\Function.h"
#include "..\Table.h"
#include "..\Userdata.h"

#include <memory>
#include <string>
#include <tuple>

///////////////////////////////////////////////////////////////////////////////////////////////////
/// Forward Declarations
///////////////////////////////////////////////////////////////////////////////////////////////////
namespace LuaConnect
{
    class State;
}

namespace LuaConnect
{
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Struct - Nil
    ///////////////////////////////////////////////////////////////////////////////////////////////
    struct LUACONNECT_API Nil;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - Stack
    ///////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T>
    class LUACONNECT_API Stack
    {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public:
        static T Get(std::shared_ptr<State> state, int index);

        static T Pop(std::shared_ptr<State> state);
        static void Push(std::shared_ptr<State> state, T value);
    };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - Stack<Nil>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    template <>
    class LUACONNECT_API Stack<Nil>
    {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public:
        static void Push(std::shared_ptr<State> state);
    };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - Stack<bool>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    template <>
    class LUACONNECT_API Stack<bool>
    {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public:
        static bool Get(std::shared_ptr<State> state, int index);

        static bool Pop(std::shared_ptr<State> state);
        static void Push(std::shared_ptr<State> state, const bool& value);
    };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - Stack<lua_Integer>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    template <>
    class LUACONNECT_API Stack<lua_Integer>
    {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public:
        static lua_Integer Get(std::shared_ptr<State> state, int index);

        static lua_Integer Pop(std::shared_ptr<State> state);
        static void Push(std::shared_ptr<State> state, const lua_Integer& value);
    };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - Stack<lua_Unsigned>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    template <>
    class LUACONNECT_API Stack<lua_Unsigned>
    {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public:
        static lua_Unsigned Get(std::shared_ptr<State> state, int index);

        static lua_Unsigned Pop(std::shared_ptr<State> state);
        static void Push(std::shared_ptr<State> state, const lua_Unsigned& value);
    };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - Stack<lua_Number>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    template <>
    class LUACONNECT_API Stack<lua_Number>
    {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public:
        static lua_Number Get(std::shared_ptr<State> state, int index);

        static lua_Number Pop(std::shared_ptr<State> state);
        static void Push(std::shared_ptr<State> state, const lua_Number& value);
    };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - Stack<const char*>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    template <>
    class LUACONNECT_API Stack<const char*>
    {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public:
        static void Push(std::shared_ptr<State> state, const char* value);
    };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - Stack<std::string>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    template <>
    class LUACONNECT_API Stack<std::string>
    {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public:
        static std::string Get(std::shared_ptr<State> state, int index);

        static std::string Pop(std::shared_ptr<State> state);
        static void Push(std::shared_ptr<State> state, const std::string& value);
    };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - Stack<lua_CFunction>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    template <>
    class LUACONNECT_API Stack<lua_CFunction>
    {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public:
        static lua_CFunction Get(std::shared_ptr<State> state, int index);

        static lua_CFunction Pop(std::shared_ptr<State> state);
        static void Push(std::shared_ptr<State> state, const lua_CFunction& value, int upvalueCount = 0);
    };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - Stack<Function>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    template <>
    class LUACONNECT_API Stack<Function>
    {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public:
        static Function Get(std::shared_ptr<State> state, int index);

        static Function Pop(std::shared_ptr<State> state);
        static void Push(std::shared_ptr<State> state, const Function& value);
    };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - Stack<Table>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    template <>
    class LUACONNECT_API Stack<Table>
    {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public:
        static Table Get(std::shared_ptr<State> state, int index);

        static Table Pop(std::shared_ptr<State> state);
        static void Push(std::shared_ptr<State> state, const Table& value);
    };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - Stack<const char[]>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    template <std::size_t N>
    class LUACONNECT_API Stack<const char[N]>
    {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public:
        static void Push(std::shared_ptr<State> state, const char(&value)[N]);
    };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - Stack<Userdata<U>>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T>
    class LUACONNECT_API Stack<Userdata<T>>
    {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public:
        static Userdata<T> Get(std::shared_ptr<State> state, int index);

        static Userdata<T> Pop(std::shared_ptr<State> state);
        static void Push(std::shared_ptr<State> state, const Userdata<T>& value);
    };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Class - StackHelper
    ///////////////////////////////////////////////////////////////////////////////////////////////
    class LUACONNECT_API StackHelper
    {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Nested Types
    ///////////////////////////////////////////////////////////////////////////////////////////////
    private:
        ///////////////////////////////////////////////////////////////////////////////////////////
        /// Class - StackPusher
        ///////////////////////////////////////////////////////////////////////////////////////////
        template <int N, typename... Args>
        struct StackPusher
        {
            static void PushIndex(std::shared_ptr<State> state, std::tuple<const Args&...> args);
            static void PushRecursive(std::shared_ptr<State> state, std::tuple<const Args&...> args);
        };

        ///////////////////////////////////////////////////////////////////////////////////////////
        /// Class - StackPusher<0, Args...>
        ///////////////////////////////////////////////////////////////////////////////////////////
        template <typename... Args>
        struct StackPusher<0, Args...>
        {
            static void PushIndex(std::shared_ptr<State> state, std::tuple<const Args&...> args) { }
            static void PushRecursive(std::shared_ptr<State> state, std::tuple<const Args&...> args) { }
        };

        ///////////////////////////////////////////////////////////////////////////////////////////
        /// Class - StackRetriever
        ///////////////////////////////////////////////////////////////////////////////////////////
        template <int N, typename... Args>
        struct StackRetriever
        {
            static void GetIndex(std::shared_ptr<State> state, std::tuple<Args&...> args);
            static void GetRecursive(std::shared_ptr<State> state, std::tuple<Args&...> args);
        };

        ///////////////////////////////////////////////////////////////////////////////////////////
        /// Class - StackRetriever<0, Args...>
        ///////////////////////////////////////////////////////////////////////////////////////////
        template <typename... Args>
        struct StackRetriever<0, Args...>
        {
            static void GetIndex(std::shared_ptr<State> state, std::tuple<Args&...> args) { }
            static void GetRecursive(std::shared_ptr<State> state, std::tuple<Args&...> args) { }
        };

        ///////////////////////////////////////////////////////////////////////////////////////////
        /// Class - UpvalueRetriever
        ///////////////////////////////////////////////////////////////////////////////////////////
        template <int N, typename... Args>
        struct UpvalueRetriever
        {
            static void GetIndex(std::shared_ptr<State> state, std::tuple<Args&...> args);
            static void GetRecursive(std::shared_ptr<State> state, std::tuple<Args&...> args);
        };

        ///////////////////////////////////////////////////////////////////////////////////////////
        /// Class - UpvalueRetriever<0, Args...>
        ///////////////////////////////////////////////////////////////////////////////////////////
        template <typename... Args>
        struct UpvalueRetriever<0, Args...>
        {
            static void GetIndex(std::shared_ptr<State> state, std::tuple<Args&...> args) { }
            static void GetRecursive(std::shared_ptr<State> state, std::tuple<Args&...> args) { }
        };

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Members
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public:
        template <typename... Args>
        static void GetStack(std::shared_ptr<State> state, std::tuple<Args&...> args);
        template <typename... Args>
        static void GetUpvalues(std::shared_ptr<State> state, std::tuple<Args&...> args);

        template <typename... Args>
        static void Push(std::shared_ptr<State> state, std::tuple<const Args&...> args);
    };
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// Inline Includes
///////////////////////////////////////////////////////////////////////////////////////////////////
#include "Stack.inl"

#endif LUACONNECT_HELPERS_STACK
